#+TITLE: Family Tree Data Structure
* Task Spec
Build a family tree implementation using Elixir structs, Racket structs, or the CLOS.

A family tree is basically an annotated graph of entities.

So we have nodes, and edges describing the relationship.

We are interested in the smallest description of a family tree.

So we want to define simple relations and composite relations. For instance, define parent, child, sibling relationships and then have nephew, niece etc. exist as compound relationships.

Once we have all of the items below, we can build up and query a family tree.

Every relationship is an /ordered/ collection of edges. The ordered collection represents the path across the tree of `primitive` relationships. So at it's core, we need to
** Build up a partially connected graph of primitive relationships
** Define a method for searching across this graph
** Define a mapping from ordered lists to names
** Aside: Using directed graphs
Directed graph makes sense, because not all relationships are the same both ways. Some are. So we can use our define_relationship func to handle that logic, by inspecting the primitive symbol and then creating additional edges accordingly.
*** Data Structure
Each primitive is either mutual or has an inverse.
So define a dict inverses. When we see a primitive, we check if it exists as a key in inverse.
* User story
1. Define a list of entities, or have it created/stored dynamically
2. Define a simple set of relationships: A is the brother of B, etc.
3. Query the resulting tree with 2 entities, and see the relationship between them.
** Interface
- Purely text-based
- List of entities ideally dynamic
- Queries are done via text as well.
- For MVP, queries are just a list or pair of two strings.
# NOTE: Noticed an issue (parent v1 v2) is naturally interpreted as "v1 is the parent of v2", so we should have an edge from v1 -> v2 labelled parent. Actually it's fine, I think. But check this.

* Write
Syntax is ~primitive vert1 vert2~

#+begin_src elixir :tangle yes
defmodule DefineEdge do
  import Graph
  import Keyword
  @base_inverses [parent: :child]

  # @spec mirror_kwlist(keyword) :: keyword
  def mirror_kwlist(kwlist) do
    # If we have [a:b, c:d] returns a mirrored list [b:a, d:c]
    for {k, v} <- kwlist do
      {v, k}
    end
  end

  # @spec inverses() :: keyword
  def inverses do
    merge(@base_inverses, mirror_kwlist(@base_inverses))
  end

  # Expands acceptable syntax

  @type expr :: {atom, atom, atom}

  # @spec new_relationships(expr) :: Graph.t()
  def new_relationship({primitive, v1, v2}, tree) do
    tree = add_edge(tree, v1, v2, label: primitive)
    # If not in inverse, return itself
    inverse = Keyword.get(inverses(), primitive, primitive)
    add_edge(tree, v2, v1, label: inverse)
  end
end
#+end_src
** Primitives
- sibling [MUTUAL]
- parent [NOT]
- marriage [MUTUAL]

* Query
~(relationship vert1 vert2)~
List of atoms, basically
Can be a macro or a function
Macro is nice, because we get extensibility and we can call this a DSL.
Will discard cause us problems later? Probably

  https://stackoverflow.com/questions/7612015/evaluating-expressions-contained-as-strings
#+begin_src elixir :tangle yes
defmodule QueryTree do
  import Graph
  import Enum

  # @spec make_pairs(nonempty_list) :: [list]
  def make_pairs([]) do [] end
  def make_pairs(nil) do [] end

  def make_pairs(lst) do
    # Make a list [a b c d] into [a|b] [b|c] [c|d]. So a list of vertices to a list of edges, basically
    chunk_every(lst, 2, 1, :discard)
  end


  @type expr :: {atom, atom}

  # @spec query(expr) :: [{atom}]
  def query({v1, v2}, tree) do
    # List of vertex structs
    vertices = get_shortest_path(tree, v1, v2)
    pairs = make_pairs(vertices) # FIXME
    edges = map(pairs, fn [v1, v2] -> edges(tree, v1, v2) end)
 #+end_src
    Really, we only care about the ordered list of labels
    Each elem of edges is a list of edges between two points.
    It's a directed graph, so only labels going in the proper direction show up. Hopefully.

    #+begin_src elixir :tangle yes
    labels = map(map(edges, &hd/1), fn x -> x.label end)

    breadcrumbed =
      map(map(edges, &hd/1), fn x ->
        %Graph.Edge{label: l, v2: v} = x
        # EG: {:child, :vader}
        {l, v}
      end)

   # breadcrumbed
    if pairs != [] do
      Simplifier.collapse_compounds(labels)
    else
      "No Valid Path Found"

    end
  end
end
#+end_src
We return an ordered list of primitive relationships, ~breadcrumbed~.
# If we want to leave a breadcrumb trail of who we relate to at every step, just do breadcrumbed instead. If we want to strip out this info, return labels
* Mutability
The add edge function is non-mutating, alas. So we need a way to keep track of state. So I guess we're using a GenServer, which means processes need to work. Then we can have a server process keep track of the graph, and call parse and handle
Refactor: We need to pass tree in as a param to all functions which rely on it in all of our calls, rather than assuming it's handled by a global variable.
Actually: https://dantswain.herokuapp.com/blog/2015/01/06/storing-state-in-elixir-with-processes/ exists

So a better idea is to implement wrapper functions around those things which take in a tree, which accept a tree as a /message/ from our state tracker module.

The define and query modules need to get a new arg tree in their main functions
# The Interpreter needs to get a new method which receives a string and a graph via the receive block, calls parse on it, calls handle on the resulting list of atoms (with the graph as well, I guess), and sends the resulting tree back.

We basically need a mainloop function which takes in a graph and calls itself. We define this in the main/overseer module, I guess.
So it has two functions - repl and loop.
Repl is pretty much the repl we have now. We need to refactor define and query modules to have wrappers which send messages, probably. But this seems doable, I think.
Loop takes in a graph. When it receives an update message and a new graph, calls itself with the updated graph. When it receives a query message, it sends the graph and calls itself with its current graph.
State tracking via recursive functions. Huh.
Is this like a thunk? It feels like a thunk.
#+begin_src elixir :tangle yes
defmodule GraphState do
  @name __MODULE__
  def new do
    Agent.start_link(fn -> Graph.new() end, name: @name)
  end

  def query(_pid, expr) do
    Agent.get(@name, &QueryTree.query(expr, &1))
  end

  def add_edge(_pid, expr) do
    Agent.update(@name, &DefineEdge.new_relationship(expr, &1))
    expr
  end

  def get_graph(_pid) do
    Agent.get(@name, fn x -> x end)
  end
end
#+end_src


* Parsing
This is genuinely tricky. Or maybe not!
https://stackoverflow.com/questions/29225456/parse-elixir-terms-from-a-string
Parsing strings via pattern matching sounds fun
Basically we have a list of 2 or 3 atoms.

If 3 atoms, we interpret it as a write, if 2 atoms as a query. This is brittle as hell, so focus on the low-level parsing and then the interface stuff.

So for now
    Parse is in brittle form: Assumes well-formatted list of keywords, no commas or delimiters

#+begin_src elixir :tangle yes
defmodule Interpreter do
  import String
  import Enum
  import GraphState
#+end_src
  All functions here should basically return a list or tuple of atoms. Then we call handle on that and it dispatches based on pattern matching.


  <2021-12-13 Mon> Handle now returns a 1-arg function which takes in a pid and does whatever it should to that PID's family tree
#+begin_src elixir :tangle yes
def parse(str) do
  # Return a list of atoms based on processing/validating/whatever a quoted form.
  map(split(str), &to_atom/1)
end

def handle([:graph]) do
  &get_graph(&1)
end

def handle([relationship, v1, v2]) do
  # DefineEdge.new_relationship({relationship, v1, v2})
  &add_edge(&1, {relationship, v1, v2})
end

def handle([v1, v2]) do
  &query(&1, {v1, v2})
end

def handle(_anything_else) do
  fn _x -> "Invalid Input" end
end
end
#+end_src

#+begin_src elixir :tangle yes
defmodule Interaction do
  import Interpreter
  def main() do
    familytree= GraphState.new()
    repl(familytree)

  end


  def repl(tree, prompt \\ ">") do
    command = IO.gets(prompt)
    if command == :exit do
      nil
    else
      result = Interpreter.handle(parse(command)).(tree)
      IO.inspect(result)
      repl(tree, prompt)
    end
  end
end
#+end_src

* Simplification
  Simplify a relationship, i.e a list of primitive labels
  Keys in compound_relationships are lists of atoms, values are atoms. eg: [parent, brother]: uncle/aunt/gender neutral version.
#+begin_src elixir :tangle yes
defmodule Simplifier do
  @compound_relationships %{
    [:parent, :parent] => :grandparent,
    [:sibling, :sibling] => :sibling
  }

  def collapse([], _, _) do
    []
  end
#+end_src
Basically, we want to walk through the breadcrumbed list and collapse sublists which map to a compound relationship.
#+begin_src elixir :tangle yes
  def collapse(list, sublist, replacement) do
    if List.starts_with?(list, sublist) do
      [replacement] ++ collapse(Enum.slice(list, length(sublist), length(list)), sublist, replacement)
    else
      [hd(list) | collapse(tl(list), sublist, replacement)]
    end
  end
#+end_src
  Overall plan: Call collapse with each list in compound_relationships, sorted from longest to shortest. So get rid of longest paths first.
  Decent heuristic, I think.

#+begin_src elixir :tangle yes
  defp helper(lst, sorted, compounds \\ @compound_relationships)
  defp helper(lst, [h | t], compounds) do
    helper(collapse(lst, h, compounds[h]), t, compounds)
  end

  defp helper(lst, [], _compounds) do
    lst
  end

  def collapse_compounds(list, compounds \\ @compound_relationships) do
    sorted = Enum.sort(Map.keys(compounds), fn x,y -> length(x)< length(y) end)
    helper(list, sorted)
  end

end
#+end_src

If KWlist: Map from atoms to lists of atoms. So call it... Not doing this.
If Hashmap: Make a list of keys sorted descending in len(key), since key is a list. Then, call collapse list, key, val in comprehension
* Getting to something testable
** COMMENT How to do something like a global variable
See the discussion on mutability
Basically, the idea is that all of these modify a single tree.
One way to do that is to have a module level attribute ~@tree~ in DefineEdge and QueryTree. Is that mutable?

We can set it up to accumulate with future module defs, but not sure if we can mutate it from within a function.
** DONE Setup Mix.exs
** Unit Tests
*** Do directed graphs work the way we want
YES!
*** Parser
YES!
*** Defining edges - does it do forward and backward properly
YES!
*** Querying - does discard cause problems
NO!
*** Simplifier looks tricky
**** Collapse
**** Recursive stuf
* Making it work on edge cases
Greek Myth is my main edge case for now.
The key problem there is multiple paths to the same object. So we need an efficient way of finding all possible paths.

Recursive brute-force is a possibility, but I'd rather not.

I am using someone else's implementation of graphs/networks for this, but if I have time I can try to roll my own.

If we don't want edge cases, we can do something like type-checking. So it errors out if someone enters something like greek myths.

Star Wars is also a decent edge case? Or just a funny test case

** Finding all possible paths between two nodes on a graph
Elixir has funcs for this. How nice.
* Tests
** Greeks
** Star Wars
* Extensions
** Inverse Query
A cool thing would be to do an inverse query /efficiently/.
So

** Multiperson Query
Relationships between 3 or more people

** Expand it into a full DSL, with ability to query if people are siblings, etc
Nope. Not for a while, at least.

** Create complex relationships
The key problem is that this requires a multinode path which may be ambiguous. So you would need to specify via who, in which case we're back to the primitive binary setup. So, scratch this I guess.
* COMMENT Stack
Pros, Cons, etc.
Since the core data structure is a graph, implementations probably exist already for all established langs. So the main questions are
1. What's more fun
2. What's more useful to learn
And I genuinely don't know. Elixir is probably the most useful, but Lisp is Lisp.
- Internally, Elixir is just knockoff lisp. So unless https://github.com/bitwalker/libgraph is really nice, use racket.
- Libgraph is really nice, and has builtins to give me a list of edges. So Elixir it is!

- Racket has builtins for mutating graphs and giving nodes/edges custom properties. So we can trivially define a property 'relationship'. Then we can do a

- On the other hand, libgraph is quite nice, and racket sucks at mutation by design.
- So plan is to write in Elixir for now, because it has the best tools for working with graphs.
** COMMENT Elixir
** COMMENT CLOS
** COMMENT Racket
